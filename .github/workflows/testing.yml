name: RavenHydroFramework Testing

on:
  push:
    branches:
     - main
  pull_request:

jobs:
  lint:
    name: Code Quality Checks
    if: github.event_name != 'push' || github.ref != 'refs/heads/main'
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@17d0e2bd7d51742c71671bd19fa12bdc9d40a3d6 # v2.8.1
        with:
          egress-policy: audit
      - name: Checkout Repository
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      - name: Install linters
        run: |
          sudo apt-get update
          sudo apt-get install uncrustify cppcheck iwyu
      - name: Set up Python3
        uses: actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d # v5.1.0
        with:
          python-version: '3.x'
      - name: Run pre-commit hooks
        uses: pre-commit/action@2c7b3805fd2a0fd8c1884dcaebf91fc102a13ecd # v3.0.1

  build-netcdf:
    name: Build RavenHydroFramework binary (${{ matrix.build_type }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        build_type: [Debug, Release]
    defaults:
      run:
        shell: bash
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@17d0e2bd7d51742c71671bd19fa12bdc9d40a3d6 # v2.8.1
        with:
          egress-policy: audit
      - name: Checkout Repository
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Install dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install libnetcdf-dev build-essential cmake
      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install netcdf cmake wget

      - name: Fetch NetCDF CMake script
        run: |
          wget https://raw.githubusercontent.com/Kitware/VTK/master/CMake/FindNetCDF.cmake -P cmake
      - name: Build
        id: build
        continue-on-error: true
        run: |
          cmake . -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          make -j4
      - name: Run tests
        if: steps.build.outcome == 'success'
        run: |
          ./Raven
          ./Raven -v

  build:
    name: Build RavenHydroFramework binary (${{ matrix.build_type }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        build_type: [ Debug, Release ]
    defaults:
      run:
        shell: bash
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@17d0e2bd7d51742c71671bd19fa12bdc9d40a3d6 # v2.8.1
        with:
          egress-policy: audit
      - name: Checkout Repository
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Install dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install build-essential cmake
      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install cmake
      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install cmake
          choco install ninja

      - name: Build
        id: build
        continue-on-error: true
        run: |
          cmake --build . --config {{ matrix.build_type }} -j 3

      - name: Run tests (Linux and macOS)
        if: steps.build.outcome == 'success' && matrix.os != 'windows-latest'
        run: |
          ./Raven
          ./Raven -v
      - name: Run tests (Windows)
        if: steps.build.outcome == 'success' && matrix.os == 'windows-latest'
        run: |
          ./Raven.exe
          ./Raven.exe -v
